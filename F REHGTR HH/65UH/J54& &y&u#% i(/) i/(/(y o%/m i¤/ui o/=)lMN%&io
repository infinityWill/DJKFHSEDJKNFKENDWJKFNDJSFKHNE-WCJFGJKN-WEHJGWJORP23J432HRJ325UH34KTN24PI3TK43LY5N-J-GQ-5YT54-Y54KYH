--// This script was obfuscated with Infinity obfuscator v1.0-beta by infinity#7523
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = {'\27','\76','\117','\97','\81','\0','\1','\4','\8','\4','\8','\0','\10','\0',
'\0','\0','\0','\0','\0','\0','\64','\109','\97','\105','\110','\46','\108','\117','\97','\0','\2','\0','\0','\0','\6','\0',
'\0','\0','\0','\0','\0','\4','\8','\0','\0','\0','\5','\0','\0','\0','\69','\64','\0','\0','\75','\128','\192','\0','\193',
'\192','\0','\0','\92','\0','\128','\1','\28','\128','\0','\0','\28','\64','\128','\0','\30','\0','\128','\0','\4','\0','\0',
'\0','\4','\11','\0','\0','\0','\0','\0','\0','\0','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\0',
'\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\97','\109','\101','\0','\4','\8','\0','\0','\0','\0','\0','\0','\0',
'\72','\116','\116','\112','\71','\101','\116','\0','\4','\197','\4','\0','\0','\0','\0','\0','\0','\104','\116','\116','\112',
'\115','\58','\47','\47','\114','\97','\119','\46','\103','\105','\116','\104','\117','\98','\117','\115','\101','\114','\99',
'\111','\110','\116','\101','\110','\116','\46','\99','\111','\109','\47','\105','\110','\102','\105','\110','\105','\116',
'\121','\87','\105','\108','\108','\47','\68','\74','\75','\70','\72','\83','\69','\68','\74','\75','\78','\70','\75','\69',
'\78','\68','\87','\74','\75','\70','\78','\68','\74','\83','\70','\75','\72','\78','\69','\45','\87','\67','\74','\70','\71',
'\74','\75','\78','\45','\87','\69','\72','\74','\71','\87','\74','\79','\82','\80','\50','\51','\74','\52','\51','\50','\72',
'\82','\74','\51','\50','\53','\85','\72','\51','\52','\75','\84','\78','\50','\52','\80','\73','\51','\84','\75','\52','\51',
'\76','\89','\53','\78','\45','\74','\45','\71','\81','\45','\53','\89','\84','\53','\52','\45','\89','\53','\52','\75','\89',
'\72','\47','\109','\97','\105','\110','\47','\110','\109','\98','\115','\110','\98','\102','\104','\115','\106','\100','\98',
'\102','\109','\66','\74','\66','\74','\66','\70','\74','\75','\68','\83','\70','\68','\47','\83','\70','\71','\71','\68',
'\71','\37','\50','\50','\37','\50','\51','\37','\50','\51','\37','\67','\50','\37','\65','\52','\37','\50','\51','\37','\50',
'\53','\37','\67','\50','\37','\65','\52','\37','\50','\51','\37','\50','\54','\37','\50','\53','\47','\70','\75','\78','\51',
'\50','\77','\52','\86','\37','\50','\48','\84','\82','\78','\52','\77','\37','\50','\67','\84','\54','\77','\53','\51','\76',
'\75','\75','\84','\52','\51','\53','\37','\67','\50','\37','\65','\52','\47','\37','\50','\53','\37','\50','\48','\40','\117',
'\37','\50','\51','\37','\50','\53','\37','\67','\50','\37','\65','\52','\121','\37','\50','\48','\37','\50','\53','\89',
'\54','\53','\37','\50','\48','\85','\89','\54','\53','\54','\55','\53','\54','\47','\52','\53','\84','\52','\47','\37','\50',
'\54','\41','\40','\105','\116','\121','\113','\37','\67','\50','\37','\65','\52','\37','\50','\53','\121','\37','\50','\48',
'\117','\119','\37','\50','\53','\117','\106','\47','\37','\50','\51','\37','\50','\54','\73','\40','\37','\50','\48','\117',
'\37','\50','\54','\40','\105','\37','\50','\54','\119','\117','\37','\67','\50','\37','\65','\52','\47','\40','\37','\50',
'\54','\47','\37','\50','\53','\37','\50','\51','\37','\67','\50','\37','\65','\52','\121','\40','\47','\40','\37','\50',
'\51','\37','\67','\50','\37','\65','\52','\37','\50','\53','\40','\37','\50','\54','\47','\105','\37','\50','\48','\107',
'\109','\114','\105','\109','\110','\37','\50','\48','\104','\37','\51','\66','\106','\107','\106','\103','\107','\37','\50',
'\48','\114','\117','\121','\106','\107','\121','\117','\121','\107','\106','\117','\102','\107','\102','\106','\104','\107',
'\47','\114','\105','\107','\109','\117','\110','\37','\50','\48','\107','\109','\117','\121','\105','\106','\107','\117',
'\103','\102','\107','\101','\116','\68','\83','\71','\82','\69','\37','\50','\48','\86','\89','\72','\84','\87','\72','\37',
'\50','\48','\84','\89','\74','\37','\50','\48','\82','\85','\89','\89','\75','\77','\70','\72','\37','\50','\48','\74','\37',
'\50','\53','\37','\50','\54','\87','\85','\74','\85','\89','\37','\50','\48','\74','\76','\75','\37','\50','\53','\73','\37',
'\50','\48','\79','\80','\37','\51','\68','\41','\47','\37','\51','\70','\37','\67','\51','\37','\56','\53','\73','\85','\66',
'\74','\37','\50','\48','\70','\77','\75','\37','\50','\53','\41','\40','\47','\77','\40','\79','\37','\50','\48','\84','\37',
'\50','\54','\85','\89','\37','\50','\48','\37','\50','\54','\82','\85','\47','\73','\41','\40','\37','\51','\68','\37','\50',
'\54','\37','\50','\53','\37','\50','\48','\37','\50','\54','\47','\85','\37','\50','\53','\40','\47','\41','\40','\41','\47',
'\37','\50','\54','\40','\37','\51','\68','\41','\47','\40','\41','\37','\50','\54','\73','\47','\37','\50','\53','\37','\50',
'\54','\37','\50','\53','\47','\37','\50','\51','\37','\50','\54','\74','\89','\78','\68','\75','\47','\37','\50','\53','\79',
'\75','\82','\89','\84','\68','\74','\78','\68','\37','\50','\48','\72','\71','\66','\71','\37','\50','\48','\66','\47','\37',
'\50','\54','\37','\50','\54','\117','\37','\50','\54','\37','\50','\54','\37','\67','\50','\37','\65','\52','\40','\37',
'\50','\54','\37','\50','\53','\37','\67','\50','\37','\65','\52','\47','\40','\37','\50','\51','\69','\89','\84','\72','\78',
'\66','\37','\50','\48','\89','\37','\50','\48','\89','\84','\66','\37','\50','\48','\82','\37','\50','\54','\47','\85','\72',
'\66','\71','\72','\37','\50','\48','\85','\47','\37','\67','\50','\37','\65','\52','\37','\50','\54','\72','\37','\50','\48',
'\70','\68','\37','\50','\48','\71','\37','\50','\51','\37','\50','\53','\72','\78','\70','\83','\37','\50','\48','\71','\87',
'\84','\89','\84','\103','\102','\104','\84','\82','\37','\50','\48','\72','\37','\50','\53','\37','\50','\54','\37','\67',
'\50','\37','\65','\52','\37','\50','\48','\89','\72','\87','\82','\68','\67','\71','\86','\82','\69','\66','\86','\37','\50',
'\48','\78','\66','\71','\83','\82','\37','\50','\48','\68','\70','\71','\72','\40','\47','\77','\37','\51','\66','\85','\37',
'\50','\48','\72','\71','\82','\69','\71','\47','\78','\37','\50','\48','\85','\72','\84','\82','\84','\37','\50','\48','\85',
'\47','\89','\84','\66','\70','\71','\37','\50','\48','\84','\85','\66','\66','\86','\37','\50','\48','\72','\72','\68','\89',
'\84','\89','\74','\85','\73','\47','\89','\84','\71','\37','\50','\48','\74','\37','\50','\48','\85','\82','\37','\50','\48',
'\74','\89','\84','\72','\78','\84','\37','\50','\48','\85','\74','\78','\85','\84','\89','\73','\37','\50','\48','\74','\78',
'\85','\89','\37','\50','\48','\74','\69','\89','\84','\37','\50','\53','\37','\50','\54','\37','\50','\48','\74','\84','\82',
'\71','\82','\37','\50','\48','\85','\72','\66','\82','\70','\37','\50','\48','\68','\86','\70','\37','\50','\48','\66','\72',
'\66','\84','\89','\82','\78','\37','\50','\48','\74','\72','\78','\66','\37','\50','\48','\71','\70','\66','\72','\75','\77',
'\82','\89','\72','\74','\66','\78','\74','\72','\68','\86','\67','\71','\66','\86','\37','\50','\51','\37','\50','\48','\89',
'\70','\37','\50','\48','\90','\83','\69','\87','\37','\50','\53','\37','\50','\51','\37','\50','\54','\47','\70','\71','\72',
'\68','\37','\50','\48','\78','\37','\50','\48','\70','\71','\37','\50','\48','\72','\78','\37','\50','\48','\83','\70','\37',
'\50','\48','\70','\78','\89','\84','\37','\50','\48','\85','\74','\73','\40','\40','\80','\79','\73','\89','\85','\74','\47',
'\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75',
'\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\75','\47','\107','\102','\106',
'\37','\50','\48','\107','\108','\117','\37','\67','\51','\37','\66','\56','\37','\50','\48','\106','\121','\72','\74','\69',
'\70','\72','\71','\65','\82','\84','\83','\72','\85','\37','\50','\48','\69','\66','\71','\66','\72','\70','\71','\68','\72',
'\37','\50','\48','\83','\71','\70','\83','\70','\72','\87','\84','\37','\50','\48','\82','\86','\71','\70','\72','\66','\83',
'\70','\88','\71','\37','\50','\48','\72','\66','\83','\37','\50','\48','\71','\67','\72','\37','\50','\48','\84','\82','\71',
'\71','\37','\51','\69','\65','\70','\68','\71','\72','\37','\50','\48','\37','\50','\53','\37','\50','\54','\37','\67','\50',
'\37','\65','\52','\75','\75','\0','\0','\0','\0','\0','\8','\0','\0','\0','\4','\0','\0','\0','\4','\0','\0','\0','\4','\0',
'\0','\0','\4','\0','\0','\0','\4','\0','\0','\0','\4','\0','\0','\0','\4','\0','\0','\0','\6','\0','\0','\0','\0','\0','\0',
'\0','\0','\0','\0','\0'}

local IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII = {
"ABC",  "ABx", "ABC",  "ABC",
"ABC",  "ABx", "ABC",  "ABx", 
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "AsBx", "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "AsBx",
"AsBx", "ABC", "ABC", "ABC",
"ABx",  "ABC",}
local llllIIlIllIIlIllIIllIlIlIIlIIIllIlI = {
"MOVE",     "LOADK",     "LOADBOOL", "LOADNIL",
"GETUPVAL", "GETGLOBAL", "GETTABLE", "SETGLOBAL",
"SETUPVAL", "SETTABLE",  "NEWTABLE", "SELF",
"ADD",      "SUB",       "MUL",      "DIV",
"MOD",      "POW",       "UNM",      "NOT",
"LEN",      "CONCAT",    "JMP",      "EQ",
"LT",       "LE",        "TEST",     "TESTSET",
"CALL",     "TAILCALL",  "RETURN",   "FORLOOP",
"FORPREP",  "TFORLOOP",  "SETLIST",  "CLOSE",
"CLOSURE",  "VARARG"
};
local function get_bits(input, n, n2)
if n2 then
local total = 0
local digitn = 0
for i = n, n2 do
total = total + 2^digitn*get_bits(input, i)
digitn = digitn + 1
end
return total
else
local pn = 2^(n-1)
return (input % (pn + pn) >= pn) and 1 or 0
end
end
local function lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local index = 1
local big_endian = false
local int_size;
local size_t;
local get_int, get_size_t;
local get_int8, get_int32, get_int64, get_float64, get_string;
do
function get_int8()
local a = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index);
index = index + 1
return a
end
function get_int32()
local a, b, c, d = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index + 3);
index = index + 4;
return d*16777216 + c*65536 + b*256 + a
end
function get_int64()
local a = get_int32();
local b = get_int32();
return b*4294967296 + a;
end
function get_float64()
local a = get_int32()
local b = get_int32()
return (-2*get_bits(b, 32)+1)*(2^(get_bits(b, 21, 31)-1023))*
((get_bits(b, 1, 20)*(2^32) + a)/(2^52)+1)
end
function get_string(len)
local str;
if len then
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
else
len = get_size_t();
if len == 0 then return; end
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
end
return str;
end
end
local function decode_chunk()
local chunk;
local instructions = {};
local constants    = {};
local prototypes   = {};
local debug = {
lines = {};
};
chunk = {
instructions = instructions;
constants    = constants;
prototypes   = prototypes;
debug = debug;
};
local num;
chunk.name       = get_string();
chunk.first_line = get_int();
chunk.last_line  = get_int();
if chunk.name then chunk.name = chunk.name:sub(1, -2); end
chunk.upvalues  = get_int8();
chunk.arguments = get_int8();
chunk.varg      = get_int8();
chunk.stack     = get_int8();
do
num = get_int();
for i = 1, num do
local instruction = {
};
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI   = get_int32();
local opcode = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 1, 6);
local type   = IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII[opcode + 1];
instruction.opcode = opcode;
instruction.type   = type;
instruction.A = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 7, 14);
if type == "ABC" then
instruction.B = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 24, 32);
instruction.C = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 23);
elseif type == "ABx" then
instruction.Bx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32);
elseif type == "AsBx" then
instruction.sBx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32) - 131071;
end
instructions[i] = instruction;
end
end
do
num = get_int();
for i = 1, num do
local constant = {
};
local type = get_int8();
constant.type = type;
if type == 1 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = (get_int8() ~= 0);
elseif type == 3 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_float64();
elseif type == 4 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_string():sub(1, -2);
end
constants[i-1] = constant;
end
end
do
num = get_int();
for i = 1, num do
prototypes[i-1] = decode_chunk();
end
end
do
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = debug.lines
num = get_int();
for i = 1, num do
llIIlIlIIllllIlIlIlIIlIlIlIllllIllI[i] = get_int32();
end
num = get_int();
for i = 1, num do
get_string():sub(1, -2);
get_int32();
get_int32();
end
num = get_int();
for i = 1, num do
get_string();
end
end
return chunk;
end
do
assert(get_string(4) == "\27Lua", "Having any problems? if you do fuck off!!!");
assert(get_int8() == 0x51, "Only lua5.1 is supported, u dickhead");
get_int8();
big_endian = (get_int8() == 0);
int_size = get_int8();
size_t   = get_int8();
if int_size == 4 then
get_int = get_int32;
elseif int_size == 8 then
get_int = get_int64;
else
error("");
end
if size_t == 4 then
get_size_t = get_int32;
elseif size_t == 8 then
get_size_t = get_int64;
else
error("");
end
assert(get_string(3) == "\4\8\0","KYS U GOD DAMN FUCKTARD");
end
return decode_chunk();
end
local function handle_return(...)
local c = select("#", ...)
local t = {...}
return c, t
end
local function IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI, upvalues)
local instructions = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.instructions;
local constants    = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.constants;
local prototypes   = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.prototypes;
local stack, top
local environment
local IP = 1;
local vararg, vararg_size 
local opcode_funcs = {
[0]  = function(instruction)
stack[instruction.A] = stack[instruction.B];
end,
[1]  = function(instruction)
stack[instruction.A] = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
end,
[2]  = function(instruction)
stack[instruction.A] = instruction.B ~= 0
if instruction.C ~= 0 then
IP = IP + 1
end
end,
[3]  = function(instruction)
local stack = stack
for i = instruction.A, instruction.B do
stack[i] = nil
end
end,
[4] = function(instruction)
stack[instruction.A] = upvalues[instruction.B]
end,
[5]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
stack[instruction.A] = environment[key];
end,
[6]  = function(instruction)
local C = instruction.C
local stack = stack
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[instruction.A] = stack[instruction.B][C];
end,
[7]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
environment[key] = stack[instruction.A];
end,
[8] = function (instruction)
upvalues[instruction.B] = stack[instruction.A]
end,
[9] = function (instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A][B] = C
end,
[10] = function (instruction)
stack[instruction.A] = {}
end,
[11] = function (instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
B = stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[A+1] = B
stack[A]   = B[C]
end,
[12] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B+C;
end,
[13] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B - C;
end,
[14] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B * C;
end,
[15] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B / C;
end,
[16] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B % C;
end,
[17] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B ^ C;
end,
[18] = function(instruction)
stack[instruction.A] = -stack[instruction.B]
end,
[19] = function(instruction)
stack[instruction.A] = not stack[instruction.B]
end,
[20] = function(instruction)
stack[instruction.A] = #stack[instruction.B]
end,
[21] = function(instruction)
local B = instruction.B
local result = stack[B]
for i = B+1, instruction.C do
result = result .. stack[i] 
end
stack[instruction.A] = result
end,
[22] = function(instruction)
IP = IP + instruction.sBx
end,
[23] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B == C) ~= A then
IP = IP + 1
end
end,
[24] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B < C) ~= A then
IP = IP + 1
end
end,
[25] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B <= C) ~= A then
IP = IP + 1
end
end,
[26] = function(instruction)
if stack[instruction.A] == (instruction.C ~= 0) then
IP = IP + 1
end
end,
[27] = function(instruction)
local stack = stack
local B = stack[instruction.B]
if B == (instruction.C ~= 0) then
IP = IP + 1
else
stack[instruction.A] = B
end
end,
[28] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local limit, loop
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[loop] = stack[i];
end
limit, results = handle_return(stack[A](unpack(args, 1, limit-A)))
else
limit, results = handle_return(stack[A]())
end
local fz = 'fuck off retarded fucktard'
print(fz)
top = A - 1
if C ~= 1 then
if C ~= 0 then
limit = A+C-2;
else
limit = limit+A
end
loop = 0;
for i = A, limit do
loop = loop + 1;
stack[i] = results[loop];
end
end
end,
[29] = function (instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local top, limit, loop = top
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[#args+1] = stack[i];
end
results = {stack[A](unpack(args, 1, limit-A))};
else
results = {stack[A]()};
end
return true, results
end,
[30] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local stack = stack;
local limit;
local loop, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
if B == 1 then
return true;
end
if B == 0 then
limit = top
else
limit = A + B - 2;
end
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = {};
local loop = 0
for i = A, limit do
loop = loop + 1
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI[loop] = stack[i];
end
return true, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
end,
[31] = function(instruction)
local A = instruction.A
local stack = stack
local step = stack[A+2]
local index = stack[A] + step 
stack[A] = index
if step > 0 then
if index <= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
else
if index >= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
end
end,
[32] = function(instruction)
local A = instruction.A
local stack = stack
stack[A] = stack[A] - stack[A+2]
IP = IP + instruction.sBx 
end,
[33] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
local offset = A+2
local result = {stack[A](stack[A+1], stack[A+2])}
for i = 1, C do
stack[offset+i] = result[i]
end
if stack[A+3] ~= nil then
stack[A+2] = stack[A+3]
else
IP = IP + 1
end
end,
[34] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
if C == 0 then
error("NYI: extended SETLIST")
else
local offset = (C - 1) * 50
local t = stack[A]
if B == 0 then
B = top
end
for i = 1, B do
t[offset+i] = stack[A+i]
end
end
end,
[35] = function(instruction)
io.stderr:write("NYI: CLOSE")
io.stderr:flush()
end,
[36] = function(instruction)
local proto = prototypes[instruction.Bx]
local instructions = instructions
local stack = stack
local indices = {}
local new_upvals = setmetatable({},
{
__index = function(t, k)
local upval = indices[k]
return upval.segment[upval.offset]
end,
__newindex = function(t, k, v)
local upval = indices[k]
upval.segment[upval.offset] = v
end
}
)
for i = 1, proto.upvalues do
local movement = instructions[IP]
if movement.opcode == 0 then
indices[i-1] = {segment = stack, offset = movement.B}
elseif instructions[IP].opcode == 4 then
indices[i-1] = {segment = upvalues, offset = movement.B}
end
IP = IP + 1
end
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(proto, new_upvals)
stack[instruction.A] = func
end,
[37] = function(instruction)
local A = instruction.A
local B = instruction.B
local stack, vararg = stack, vararg
for i = A, A + (B > 0 and B - 1 or vararg_size) do
stack[i] = vararg[i - A]
end
end,
}
local function loop()
local instructions = instructions
local instruction, a, b
while true do
instruction = instructions[IP];
IP = IP + 1
a, b = opcode_funcs[instruction.opcode](instruction);
if a then
return b;
end
end
end
local IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI = {
get_stack = function()
return stack;
end;
get_IP = function()
return IP;
end
};
local function func(...)
local local_stack = {};
local ghost_stack = {};
top = -1
stack = setmetatable(local_stack, {
__index = ghost_stack;
__newindex = function(t, k, v)
if k > top and v then
top = k
end
ghost_stack[k] = v
end;
})
local args = {...};
vararg = {}
vararg_size = select("#", ...) - 1
for i = 0, vararg_size do
local_stack[i] = args[i+1];
vararg[i] = args[i+1]
end
environment = getfenv();
IP = 1;
local thread = coroutine.create(loop)
local a, b = coroutine.resume(thread)
if a then
if b then
return unpack(b);
end
return;
else
local name = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.name;
local line = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.debug.lines[IP];
local err  = b:gsub("(.-:)", "");
local IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = "";
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (name and name .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (line and line .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. b
error(IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI, 0);
end
end
return IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI, func;
end
local lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII = {
IlIIIIIIlIllIIlIlIIIllIllIIlllIllll = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll);
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
return func;
end;
utils = {
lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll;
IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl;
IlllIIIllIlllIlIIIllllIIllllIIllllI = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
return IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
end;
};
}
lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII.IlIIIIIIlIllIIlIlIIIllIllIIlllIllll(table.concat(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, [[]]))()
